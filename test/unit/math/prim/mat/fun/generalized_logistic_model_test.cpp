#include <stan/math/rev/mat.hpp>
#include <stan/math/prim/mat/fun/typedefs.hpp>
#include <stan/math/rev/core.hpp>
#include <gtest/gtest.h>
#include <algorithm>
#include <chrono>

TEST(AgradRevMatrix, test_GLM_empty) {
  // test data
  std::vector<int> IDp = {};
  std::vector<int> IDs = {};
  std::vector<double> time_tmp = {};
  std::vector<double> S_tmp = {};
  std::vector<double> X_s_tmp = {};
  std::vector<double> X_r_tmp = {};
  std::vector<int> pbo_flag = {};
  int multiplicative_r = 0;
  int multiplicative_s = 0;

  // test parameters
  double tau = 0;
  double beta = 0;
  double beta_pbo = 0;
  double k_el = 0;
  double k_eq = 0;
  double base_s = 0;
  double base_r = 0;
  std::vector<double> theta_r_tmp = {};
  std::vector<double> theta_s_tmp = {};
  std::vector<double> eta_pr_tmp = {};
  std::vector<double> eta_sr_tmp = {};
  std::vector<double> eta_ps_tmp = {};
  std::vector<double> eta_ss_tmp = {};

  // expected results
  double target = 0;

  // preapare arguments
  int N = IDp.size();
  stan::math::vector_d time(N);
  stan::math::vector_d S(N);
  Eigen::Matrix<double, -1, -1> X_s(N, theta_s_tmp.size());
  Eigen::Matrix<double, -1, -1> X_r(N, theta_r_tmp.size());

  for (int j = 0; j < theta_s_tmp.size(); j++) {
    for (int i = 0; i < N; i++) {
      X_s(i, j) = X_s_tmp[j * N + i];
    }
  }

  for (int j = 0; j < theta_r_tmp.size(); j++) {
    for (int i = 0; i < N; i++) {
      X_r(i, j) = X_r_tmp[j * N + i];
    }
  }

  for (unsigned int i = 0; i < time_tmp.size(); i++) {
    time(i) = time_tmp[i];
  }
  for (unsigned int i = 0; i < S_tmp.size(); i++) {
    S(i) = S_tmp[i];
  }

  Eigen::Matrix<double, -1, 1> eta_ps(eta_ps_tmp.size());
  Eigen::Matrix<double, -1, 1> eta_pr(eta_pr_tmp.size());
  Eigen::Matrix<double, -1, 1> eta_ss(eta_ss_tmp.size());
  Eigen::Matrix<double, -1, 1> eta_sr(eta_sr_tmp.size());

  Eigen::Matrix<double, -1, 1> theta_r(theta_r_tmp.size());
  Eigen::Matrix<double, -1, 1> theta_s(theta_s_tmp.size());

  for (unsigned int i = 0; i < eta_ps_tmp.size(); i++) {
    eta_ps(i) = eta_ps_tmp[i];
  }
  for (unsigned int i = 0; i < eta_pr_tmp.size(); i++) {
    eta_pr(i) = eta_pr_tmp[i];
  }
  for (unsigned int i = 0; i < eta_ss_tmp.size(); i++) {
    eta_ss(i) = eta_ss_tmp[i];
  }
  for (unsigned int i = 0; i < eta_sr_tmp.size(); i++) {
    eta_sr(i) = eta_sr_tmp[i];
  }

  for (unsigned int i = 0; i < theta_r_tmp.size(); i++) {
    theta_r(i) = theta_r_tmp[i];
  }

  for (unsigned int i = 0; i < theta_s_tmp.size(); i++) {
    theta_s(i) = theta_s_tmp[i];
  }

  double tgt = stan::math::generalized_logistic_model(
      IDp, IDs, pbo_flag, time, S, multiplicative_s, multiplicative_r, X_s, X_r,
      tau, beta, beta_pbo, k_el, k_eq, theta_r, theta_s, eta_pr, eta_sr, eta_ps,
      eta_ss, base_s, base_r);

  // check values
  EXPECT_NEAR(tgt, target, 1e-8);

}

TEST(AgradRevMatrix, test_GLM_22_additive) {
  // test data
  std::vector<int> IDp = {
      1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,
      4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,
      7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,
      10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12,
      13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15,
      16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18,
      19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21,
      22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24};
  std::vector<int> IDs = {
      1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3};
  std::vector<double> time_tmp
      = {0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25};
  std::vector<double> S_tmp
      = {0.697422818, 0.779864818, 0.743221333, 0.758435205, 0.808051446,
         0.686108749, 0.320104563, 0.350121144, 0.502742394, 0.558053772,
         0.582478347, 0.762844653, 0.585482357, 0.700497323, 0.721721175,
         0.733862118, 0.836925895, 0.847883572, 0.236061912, 0.155799552,
         0.154413418, 0.138306271, 0.165811855, 0.124205239, 0.646444271,
         0.754752689, 0.680106139, 0.724804572, 0.761259844, 0.918885414,
         0.264301538, 0.44024127,  0.33592968,  0.466237076, 0.39026693,
         0.509501427, 0.144253139, 0.078025161, 0.079248424, 0.115048385,
         0.11482959,  0.104642728, 0.309511876, 0.25611815,  0.2870764,
         0.326425364, 0.348033363, 0.426614332, 0.137565074, 0.12310404,
         0.195950933, 0.288991499, 0.229899611, 0.22922396,  0.440310915,
         0.562917821, 0.568418993, 0.571485251, 0.621414403, 0.757130048,
         0.122328103, 0.157660026, 0.117029664, 0.154274284, 0.148335923,
         0.192465007, 0.302510816, 0.297564226, 0.226598912, 0.264716265,
         0.268766157, 0.214098964, 0.152107217, 0.195166025, 0.209850445,
         0.204396659, 0.070534809, 0.216516031, 0.0768684,   0.082234484,
         0.088461498, 0.161818497, 0.081416511, 0.163790437, 0.620134438,
         0.599999005, 0.629303669, 0.682811572, 0.677937499, 0.685667668,
         0.101899323, 0.048300604, 0.047188433, 0.054014777, 0.073608689,
         0.081108123, 0.195852052, 0.135326061, 0.188242142, 0.21820048,
         0.28448702,  0.328799858, 0.843742033, 0.796284943, 0.897453101,
         0.92183767,  0.919720003, 0.949491104, 0.206258801, 0.139764589,
         0.143756953, 0.178438121, 0.307829078, 0.33152285,  0.104238234,
         0.056300296, 0.146186095, 0.135886669, 0.140292223, 0.154451084,
         0.83179558,  0.808896718, 0.835804352, 0.838544678, 0.767683502,
         0.713641491, 0.305475768, 0.396665983, 0.414178167, 0.407262937,
         0.319619694, 0.538537886, 0.421088963, 0.467302928, 0.356255982,
         0.48063409,  0.510091931, 0.537947287, 0.826853113, 0.895192848,
         0.950521035, 0.973423564, 0.995921274, 0.998932103};

  std::vector<double> X_s_tmp={1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
                              -0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,
                              0.291666666666667,0.291666666666667,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,
                              0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,
                              -0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,
                              0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,1.29166666666667,1.29166666666667,1.29166666666667,
                              1.29166666666667,1.29166666666667,1.29166666666667,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,-0.708333333333333,-0.708333333333333,
                              -0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,
                              -0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,
                              0.291666666666667,0.291666666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333};
  
  std::vector<double> X_r_tmp={6.125,6.125,6.125,6.125,6.125,6.125,-12.875,-12.875,-12.875,-12.875,-12.875,-12.875,-23.875,-23.875,-23.875,-23.875,-23.875,-23.875,12.125,12.125,12.125,12.125,12.125,12.125,11.125,11.125,11.125,11.125,11.125,11.125,-4.875,-4.875,-4.875,-4.875,-4.875,-4.875,18.125,18.125,18.125,18.125,18.125,18.125,-17.875,
                              -17.875,-17.875,-17.875,-17.875,-17.875,-10.875,-10.875,-10.875,-10.875,-10.875,-10.875,6.125,6.125,6.125,6.125,6.125,6.125,4.125,4.125,4.125,4.125,4.125,4.125,15.125,15.125,15.125,15.125,15.125,15.125,-13.875,-13.875,-13.875,-13.875,-13.875,-13.875,-2.875,-2.875,-2.875,-2.875,-2.875,-2.875,-4.875,-4.875,-4.875,
                              -4.875,-4.875,-4.875,0.125,0.125,0.125,0.125,0.125,0.125,-2.875,-2.875,-2.875,-2.875,-2.875,-2.875,9.125,9.125,9.125,9.125,9.125,9.125,1.125,1.125,1.125,1.125,1.125,1.125,-3.875,-3.875,-3.875,-3.875,-3.875,-3.875,0.125,0.125,0.125,0.125,0.125,0.125,-4.875,-4.875,-4.875,-4.875,-4.875,-4.875,23.125,23.125,23.125,23.125,23.125,23.125,-2.875,-2.875,-2.875,-2.875,-2.875,-2.875,
                              -0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,
                              -0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,
                              -0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,
                              -0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,
                              0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,
                              1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,
                              -0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,
                              -0.708333333333333,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333};

  std::vector<int> pbo_flag = {1, 0, 0};
  int multiplicative_r = 0;
  int multiplicative_s = 0;

  // test parameters
  double tau = 42.0215338574804;
  double beta = 0.0239035483469231;
  double beta_pbo = 8.0697489120908;
  double k_el = 22.4057654873199;
  double k_eq = 35.3171886515212;
  double base_s = -0.544101927228712;
  double base_r = -1.69812331786873;
  std::vector<double> theta_r_tmp
      = std::vector<double>({-0.262210525753134, 0.250837654383259});
  std::vector<double> theta_s_tmp
      = std::vector<double>({0.346369104266117, -0.801859150105187});
  std::vector<double> eta_pr_tmp = std::vector<double>(
      {-17.9786551504441,  26.1003079932251,  34.9581906250386,
       -22.5065678355531,  13.9277848452248,  -9.94427200188429,
       -7.19795278684153,  -7.5181082149085,  -10.0290273359339,
       22.9780760751861,   -3.20056418780246, -14.7997324761412,
       -17.9413643821249,  -18.6793434635383, 0.220184159769684,
       0.0361001385322883, -5.85812418553664, 10.4854328700035,
       14.8310748454862,   -2.19297149363715, -5.56220411368782,
       3.19983239644094,   23.5272562838783,  49.0316145706797});
  std::vector<double> eta_sr_tmp = std::vector<double>(
      {3.96835893194924, 3.19411437238687, 15.7555541484421});
  std::vector<double> eta_ps_tmp = std::vector<double>(
      {-0.291210142579664, 1.14177241374197,   1.32651371207124,
       -0.649926141694316, 1.54094221421593,   1.04556310164024,
       -1.23498026092171,  0.705689771748478,  -1.06153451202662,
       -0.367307218618066, -1.14621694525942,  0.737825277410517,
       -0.345235872255303, 0.238528013605965,  0.78584989320526,
       -1.42401225819971,  -0.758462562414053, 1.90537891449092,
       -1.73091908556586,  -1.83714077907161,  1.81507653950552,
       0.579358129942187,  1.12515966925378,   1.84939444743692});
  std::vector<double> eta_ss_tmp = std::vector<double>(
      {1.39315810851538, -0.311074612787089, -0.590769174683698});

  // expected results
  double target = 220.848831635719;

  // preapare arguments
  int N = IDp.size();
  stan::math::vector_d time(N);
  stan::math::vector_d S(N);
  Eigen::Matrix<double, -1, -1> X_s(N, theta_s_tmp.size());
  Eigen::Matrix<double, -1, -1> X_r(N, theta_r_tmp.size());

  for (int j = 0; j < theta_s_tmp.size(); j++) {
    for (int i = 0; i < N; i++) {
      X_s(i, j) = X_s_tmp[j * N + i];
    }
  }

  for (int j = 0; j < theta_r_tmp.size(); j++) {
    for (int i = 0; i < N; i++) {
      X_r(i, j) = X_r_tmp[j * N + i];
    }
  }

  for (unsigned int i = 0; i < time_tmp.size(); i++) {
    time(i) = time_tmp[i];
  }
  for (unsigned int i = 0; i < S_tmp.size(); i++) {
    S(i) = S_tmp[i];
  }

  Eigen::Matrix<double, -1, 1> eta_ps(eta_ps_tmp.size());
  Eigen::Matrix<double, -1, 1> eta_pr(eta_pr_tmp.size());
  Eigen::Matrix<double, -1, 1> eta_ss(eta_ss_tmp.size());
  Eigen::Matrix<double, -1, 1> eta_sr(eta_sr_tmp.size());

  Eigen::Matrix<double, -1, 1> theta_r(theta_r_tmp.size());
  Eigen::Matrix<double, -1, 1> theta_s(theta_s_tmp.size());

  for (unsigned int i = 0; i < eta_ps_tmp.size(); i++) {
    eta_ps(i) = eta_ps_tmp[i];
  }
  for (unsigned int i = 0; i < eta_pr_tmp.size(); i++) {
    eta_pr(i) = eta_pr_tmp[i];
  }
  for (unsigned int i = 0; i < eta_ss_tmp.size(); i++) {
    eta_ss(i) = eta_ss_tmp[i];
  }
  for (unsigned int i = 0; i < eta_sr_tmp.size(); i++) {
    eta_sr(i) = eta_sr_tmp[i];
  }

  for (unsigned int i = 0; i < theta_r_tmp.size(); i++) {
    theta_r(i) = theta_r_tmp[i];
  }

  for (unsigned int i = 0; i < theta_s_tmp.size(); i++) {
    theta_s(i) = theta_s_tmp[i];
  }

  // run
  double tgt = stan::math::generalized_logistic_model(
      IDp, IDs, pbo_flag, time, S, multiplicative_s, multiplicative_r, X_s, X_r,
      tau, beta, beta_pbo, k_el, k_eq, theta_r, theta_s, eta_pr, eta_sr, eta_ps,
      eta_ss, base_s, base_r);



  // check values
  EXPECT_NEAR(tgt, target, 1e-8);
  
}

TEST(AgradRevMatrix, test_GLM_22_multiplicative) {
  // test data
  std::vector<int> IDp = {
      1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,
      4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,
      7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,
      10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12,
      13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15,
      16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18,
      19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21,
      22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24};
  std::vector<int> IDs = {
      1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3};
  std::vector<double> time_tmp
      = {0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25};
  std::vector<double> S_tmp
      = {0.697422818, 0.779864818, 0.743221333, 0.758435205, 0.808051446,
         0.686108749, 0.320104563, 0.350121144, 0.502742394, 0.558053772,
         0.582478347, 0.762844653, 0.585482357, 0.700497323, 0.721721175,
         0.733862118, 0.836925895, 0.847883572, 0.236061912, 0.155799552,
         0.154413418, 0.138306271, 0.165811855, 0.124205239, 0.646444271,
         0.754752689, 0.680106139, 0.724804572, 0.761259844, 0.918885414,
         0.264301538, 0.44024127,  0.33592968,  0.466237076, 0.39026693,
         0.509501427, 0.144253139, 0.078025161, 0.079248424, 0.115048385,
         0.11482959,  0.104642728, 0.309511876, 0.25611815,  0.2870764,
         0.326425364, 0.348033363, 0.426614332, 0.137565074, 0.12310404,
         0.195950933, 0.288991499, 0.229899611, 0.22922396,  0.440310915,
         0.562917821, 0.568418993, 0.571485251, 0.621414403, 0.757130048,
         0.122328103, 0.157660026, 0.117029664, 0.154274284, 0.148335923,
         0.192465007, 0.302510816, 0.297564226, 0.226598912, 0.264716265,
         0.268766157, 0.214098964, 0.152107217, 0.195166025, 0.209850445,
         0.204396659, 0.070534809, 0.216516031, 0.0768684,   0.082234484,
         0.088461498, 0.161818497, 0.081416511, 0.163790437, 0.620134438,
         0.599999005, 0.629303669, 0.682811572, 0.677937499, 0.685667668,
         0.101899323, 0.048300604, 0.047188433, 0.054014777, 0.073608689,
         0.081108123, 0.195852052, 0.135326061, 0.188242142, 0.21820048,
         0.28448702,  0.328799858, 0.843742033, 0.796284943, 0.897453101,
         0.92183767,  0.919720003, 0.949491104, 0.206258801, 0.139764589,
         0.143756953, 0.178438121, 0.307829078, 0.33152285,  0.104238234,
         0.056300296, 0.146186095, 0.135886669, 0.140292223, 0.154451084,
         0.83179558,  0.808896718, 0.835804352, 0.838544678, 0.767683502,
         0.713641491, 0.305475768, 0.396665983, 0.414178167, 0.407262937,
         0.319619694, 0.538537886, 0.421088963, 0.467302928, 0.356255982,
         0.48063409,  0.510091931, 0.537947287, 0.826853113, 0.895192848,
         0.950521035, 0.973423564, 0.995921274, 0.998932103};
  std::vector<double> X_s_tmp
      = {1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,
      -0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,
      0.291666666666667,0.291666666666667,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,
      0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,
      -0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,
      0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,1.29166666666667,1.29166666666667,1.29166666666667,
      1.29166666666667,1.29166666666667,1.29166666666667,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,-0.708333333333333,-0.708333333333333,
      -0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,
      -0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,
      0.291666666666667,0.291666666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333};
  std::vector<double> X_r_tmp
      = {6.125,6.125,6.125,6.125,6.125,6.125,-12.875,-12.875,-12.875,-12.875,-12.875,-12.875,-23.875,-23.875,-23.875,-23.875,-23.875,-23.875,12.125,12.125,12.125,12.125,12.125,12.125,11.125,11.125,11.125,11.125,11.125,11.125,-4.875,-4.875,-4.875,-4.875,-4.875,-4.875,18.125,18.125,18.125,18.125,18.125,18.125,
      -17.875,-17.875,-17.875,-17.875,-17.875,-17.875,-10.875,-10.875,-10.875,-10.875,-10.875,-10.875,6.125,6.125,6.125,6.125,6.125,6.125,4.125,4.125,4.125,4.125,4.125,4.125,15.125,15.125,15.125,15.125,15.125,15.125,-13.875,-13.875,-13.875,-13.875,-13.875,-13.875,-2.875,-2.875,-2.875,-2.875,-2.875,-2.875,
      -4.875,-4.875,-4.875,-4.875,-4.875,-4.875,0.125,0.125,0.125,0.125,0.125,0.125,-2.875,-2.875,-2.875,-2.875,-2.875,-2.875,9.125,9.125,9.125,9.125,9.125,9.125,1.125,1.125,1.125,1.125,1.125,1.125,-3.875,-3.875,-3.875,-3.875,-3.875,-3.875,0.125,0.125,0.125,0.125,0.125,0.125,-4.875,-4.875,-4.875,-4.875,-4.875,
      -4.875,23.125,23.125,23.125,23.125,23.125,23.125,-2.875,-2.875,-2.875,-2.875,-2.875,-2.875,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,
      0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,
      0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,
      1.29166666666667,1.29166666666667,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,0.291666666666667,0.291666666666667,0.291666666666667,
      0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,1.29166666666667,1.29166666666667,1.29166666666667,
      1.29166666666667,1.29166666666667,1.29166666666667,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,-0.708333333333333,-0.708333333333333,-0.708333333333333,
      -0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,
      -0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,0.291666666666667,1.29166666666667,1.29166666666667,
      1.29166666666667,1.29166666666667,1.29166666666667,1.29166666666667,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333,-0.708333333333333};
  std::vector<int> pbo_flag = {0, 1, 0};
  int multiplicative_r = 1;
  int multiplicative_s = 1;

  // test parameters
  double tau = 2.73801262072881;
  double beta = 8.38877127158839;
  double beta_pbo = 1.96814828833905;
  double k_el = 11.2106307510569;
  double k_eq = 12.9931380492784;
  double base_s = -1.39488005258568;
  double base_r = -17.8120515579588;
  std::vector<double> theta_r_tmp
      = std::vector<double>({-0.166886679994743, 5.35766544476805});
  std::vector<double> theta_s_tmp
      = std::vector<double>({2.27352346044549, -6.19713195009342});
  std::vector<double> eta_pr_tmp = std::vector<double>(
      {0.926219324048884,  2.47072091629073,   2.23190495695361,
       6.2905551159514,    -0.139886527378783, -0.975315778037839,
       -0.508698980897864, -3.90870391520507,  1.57049482771444,
       -1.41094820136653,  -2.66910969272396,  -1.22580225973016,
       1.79913961733165,   0.629053247923915,  1.30951241722369,
       -1.49162709632589,  5.59170151568743,   5.35557120854721,
       -1.41738827861251,  -3.29576818110051,  -2.97137194510828,
       -0.62709990067062,  1.60054112057187,   -0.604729321297296});
  std::vector<double> eta_sr_tmp = std::vector<double>(
      {-0.337492255304, -0.422362360877554, 1.75878671160712});
  std::vector<double> eta_ps_tmp = std::vector<double>(
      {-5.77634335357903,  2.99922573614399,   5.09981611902057,
       -8.96625644441104,  -2.47051934601688,  4.78249019763948,
       1.93001388737619,   -0.79834470803102,  -4.89422907608058,
       -4.5735570544389,   3.47968485313207,   2.02046634608922,
       1.73535317489447,   8.81996440823428,   1.00147165661069,
       -8.17842820251531,  -5.04141963534256,  3.34603946175761,
       -0.233730637508906, -0.587937944730874, 4.64285708044459,
       3.06635469263556,   -4.9924025695829,   3.44484279999651});
  std::vector<double> eta_ss_tmp = std::vector<double>(
      {0.477696968213818, -2.52959174559639, -8.14964446719815});

  // expected results
  double target = 22.027955846875;

  // preapare arguments
  int N = IDp.size();
  stan::math::vector_d time(N);
  stan::math::vector_d S(N);
  Eigen::Matrix<double, -1, -1> X_s(N, theta_s_tmp.size());
  Eigen::Matrix<double, -1, -1> X_r(N, theta_r_tmp.size());

  for (int j = 0; j < theta_s_tmp.size(); j++) {
    for (int i = 0; i < N; i++) {
      X_s(i, j) = X_s_tmp[j * N + i];
    }
  }

  for (int j = 0; j < theta_r_tmp.size(); j++) {
    for (int i = 0; i < N; i++) {
      X_r(i, j) = X_r_tmp[j * N + i];
    }
  }

  for (unsigned int i = 0; i < time_tmp.size(); i++) {
    time(i) = time_tmp[i];
  }
  for (unsigned int i = 0; i < S_tmp.size(); i++) {
    S(i) = S_tmp[i];
  }

  Eigen::Matrix<double, -1, 1> eta_ps(eta_ps_tmp.size());
  Eigen::Matrix<double, -1, 1> eta_pr(eta_pr_tmp.size());
  Eigen::Matrix<double, -1, 1> eta_ss(eta_ss_tmp.size());
  Eigen::Matrix<double, -1, 1> eta_sr(eta_sr_tmp.size());

  Eigen::Matrix<double, -1, 1> theta_r(theta_r_tmp.size());
  Eigen::Matrix<double, -1, 1> theta_s(theta_s_tmp.size());

  for (unsigned int i = 0; i < eta_ps_tmp.size(); i++) {
    eta_ps(i) = eta_ps_tmp[i];
  }
  for (unsigned int i = 0; i < eta_pr_tmp.size(); i++) {
    eta_pr(i) = eta_pr_tmp[i];
  }
  for (unsigned int i = 0; i < eta_ss_tmp.size(); i++) {
    eta_ss(i) = eta_ss_tmp[i];
  }
  for (unsigned int i = 0; i < eta_sr_tmp.size(); i++) {
    eta_sr(i) = eta_sr_tmp[i];
  }

  for (unsigned int i = 0; i < theta_r_tmp.size(); i++) {
    theta_r(i) = theta_r_tmp[i];
  }

  for (unsigned int i = 0; i < theta_s_tmp.size(); i++) {
    theta_s(i) = theta_s_tmp[i];
  }

  // run
  // std::chrono::steady_clock::time_point begin =
  // std::chrono::steady_clock::now();
  double tgt = stan::math::generalized_logistic_model(
      IDp, IDs, pbo_flag, time, S, multiplicative_s, multiplicative_r, X_s, X_r,
      tau, beta, beta_pbo, k_el, k_eq, theta_r, theta_s, eta_pr, eta_sr, eta_ps,
      eta_ss, base_s, base_r);

  // std::chrono::steady_clock::time_point end =
  // std::chrono::steady_clock::now(); std::cout << "ELapsed time = " <<
  // std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count()
  // << " us" << std::endl; std::cout << "tgt " << std::setprecision(15) <<
  // d.val() << std::endl;

  // check values
  EXPECT_NEAR(tgt, target, 1e-8);
}

TEST(AgradRevMatrix, test_GLM_00_additive) {
  // test data
  std::vector<int> IDp = {
      1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,
      4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,
      7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,
      10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12,
      13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15,
      16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18,
      19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21,
      22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24};
  std::vector<int> IDs = {
      1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3};
  std::vector<double> time_tmp
      = {0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25};
  std::vector<double> S_tmp
      = {0.697422818, 0.779864818, 0.743221333, 0.758435205, 0.808051446,
         0.686108749, 0.320104563, 0.350121144, 0.502742394, 0.558053772,
         0.582478347, 0.762844653, 0.585482357, 0.700497323, 0.721721175,
         0.733862118, 0.836925895, 0.847883572, 0.236061912, 0.155799552,
         0.154413418, 0.138306271, 0.165811855, 0.124205239, 0.646444271,
         0.754752689, 0.680106139, 0.724804572, 0.761259844, 0.918885414,
         0.264301538, 0.44024127,  0.33592968,  0.466237076, 0.39026693,
         0.509501427, 0.144253139, 0.078025161, 0.079248424, 0.115048385,
         0.11482959,  0.104642728, 0.309511876, 0.25611815,  0.2870764,
         0.326425364, 0.348033363, 0.426614332, 0.137565074, 0.12310404,
         0.195950933, 0.288991499, 0.229899611, 0.22922396,  0.440310915,
         0.562917821, 0.568418993, 0.571485251, 0.621414403, 0.757130048,
         0.122328103, 0.157660026, 0.117029664, 0.154274284, 0.148335923,
         0.192465007, 0.302510816, 0.297564226, 0.226598912, 0.264716265,
         0.268766157, 0.214098964, 0.152107217, 0.195166025, 0.209850445,
         0.204396659, 0.070534809, 0.216516031, 0.0768684,   0.082234484,
         0.088461498, 0.161818497, 0.081416511, 0.163790437, 0.620134438,
         0.599999005, 0.629303669, 0.682811572, 0.677937499, 0.685667668,
         0.101899323, 0.048300604, 0.047188433, 0.054014777, 0.073608689,
         0.081108123, 0.195852052, 0.135326061, 0.188242142, 0.21820048,
         0.28448702,  0.328799858, 0.843742033, 0.796284943, 0.897453101,
         0.92183767,  0.919720003, 0.949491104, 0.206258801, 0.139764589,
         0.143756953, 0.178438121, 0.307829078, 0.33152285,  0.104238234,
         0.056300296, 0.146186095, 0.135886669, 0.140292223, 0.154451084,
         0.83179558,  0.808896718, 0.835804352, 0.838544678, 0.767683502,
         0.713641491, 0.305475768, 0.396665983, 0.414178167, 0.407262937,
         0.319619694, 0.538537886, 0.421088963, 0.467302928, 0.356255982,
         0.48063409,  0.510091931, 0.537947287, 0.826853113, 0.895192848,
         0.950521035, 0.973423564, 0.995921274, 0.998932103};
  std::vector<double> X_s_tmp = {};
  std::vector<double> X_r_tmp = {};
  std::vector<int> pbo_flag = {1, 0, 0};
  int multiplicative_r = 0;
  int multiplicative_s = 0;

  // test parameters
  double tau = 35.8215375213744;
  double beta = 0.201952791395869;
  double beta_pbo = 0.400581131688344;
  double k_el = 13.3001434911736;
  double k_eq = 18.9208168626634;
  double base_s = -1.24294710432452;
  double base_r = -0.844137352716483;
  std::vector<double> theta_r_tmp = {};
  std::vector<double> theta_s_tmp = {};
  std::vector<double> eta_pr_tmp = std::vector<double>(
      {-2.16363935589517,  4.13358635867821,   1.2482381656197,
       -1.67984833718917,  0.299158820574026,  -1.56091614722712,
       -0.712943035349579, -1.75548191631475,  0.734063968205348,
       1.72160932164781,   -0.579791084081827, -2.01573558458006,
       -2.19891533655235,  -2.72142905346922,  -0.6002496971754,
       -1.47025909984764,  -0.131640920249458, 2.59523102432562,
       0.322295429750114,  1.33544290612428,   -1.37450327911661,
       1.02614803719197,   -0.536221592865512, 3.49318211704564});
  std::vector<double> eta_sr_tmp = std::vector<double>(
      {4.02881432749784, 3.52774896723969, 2.53804604249736});
  std::vector<double> eta_ps_tmp = std::vector<double>(
      {2.24899644440114,   0.156898457915127,  1.69218061275136,
       -1.02110873745124,  1.71871151345579,   0.747620089728178,
       -1.21650364639379,  0.0730893803817673, -0.713844919151347,
       0.843487627888964,  -0.967801859327677, -0.0744401037633747,
       -0.415593682558585, -0.873574669138974, 1.49591453432729,
       -1.72424040434922,  -0.429405908129416, 2.36769967928706,
       -0.565266637032297, -1.33832983054372,  2.43849859028527,
       0.296361421188066,  0.809660266601538,  3.19692116147633});
  std::vector<double> eta_ss_tmp = std::vector<double>(
      {0.0700172227194391, 0.113892813798966, 0.193578312520161});

  // expected results
  double target = 221.540202478511;

  // preapare arguments
  int N = IDp.size();
  stan::math::vector_d time(N);
  stan::math::vector_d S(N);
  Eigen::Matrix<double, -1, -1> X_s(N, theta_s_tmp.size());
  Eigen::Matrix<double, -1, -1> X_r(N, theta_r_tmp.size());

  for (int j = 0; j < theta_s_tmp.size(); j++) {
    for (int i = 0; i < N; i++) {
      X_s(i, j) = X_s_tmp[j * N + i];
    }
  }

  for (int j = 0; j < theta_r_tmp.size(); j++) {
    for (int i = 0; i < N; i++) {
      X_r(i, j) = X_r_tmp[j * N + i];
    }
  }

  for (unsigned int i = 0; i < time_tmp.size(); i++) {
    time(i) = time_tmp[i];
  }
  for (unsigned int i = 0; i < S_tmp.size(); i++) {
    S(i) = S_tmp[i];
  }

  Eigen::Matrix<double, -1, 1> eta_ps(eta_ps_tmp.size());
  Eigen::Matrix<double, -1, 1> eta_pr(eta_pr_tmp.size());
  Eigen::Matrix<double, -1, 1> eta_ss(eta_ss_tmp.size());
  Eigen::Matrix<double, -1, 1> eta_sr(eta_sr_tmp.size());

  Eigen::Matrix<double, -1, 1> theta_r(theta_r_tmp.size());
  Eigen::Matrix<double, -1, 1> theta_s(theta_s_tmp.size());

  for (unsigned int i = 0; i < eta_ps_tmp.size(); i++) {
    eta_ps(i) = eta_ps_tmp[i];
  }
  for (unsigned int i = 0; i < eta_pr_tmp.size(); i++) {
    eta_pr(i) = eta_pr_tmp[i];
  }
  for (unsigned int i = 0; i < eta_ss_tmp.size(); i++) {
    eta_ss(i) = eta_ss_tmp[i];
  }
  for (unsigned int i = 0; i < eta_sr_tmp.size(); i++) {
    eta_sr(i) = eta_sr_tmp[i];
  }

  for (unsigned int i = 0; i < theta_r_tmp.size(); i++) {
    theta_r(i) = theta_r_tmp[i];
  }

  for (unsigned int i = 0; i < theta_s_tmp.size(); i++) {
    theta_s(i) = theta_s_tmp[i];
  }

  // run
  double tgt = stan::math::generalized_logistic_model(
      IDp, IDs, pbo_flag, time, S, multiplicative_s, multiplicative_r, X_s, X_r,
      tau, beta, beta_pbo, k_el, k_eq, theta_r, theta_s, eta_pr, eta_sr, eta_ps,
      eta_ss, base_s, base_r);


  // check values
  EXPECT_NEAR(tgt, target, 1e-8);
}

TEST(AgradRevMatrix, test_GLM_21_both) {
  // test data
  std::vector<int> IDp = {
      1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,
      4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,
      7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,
      10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12,
      13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15,
      16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18,
      19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21,
      22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24};
  std::vector<int> IDs = {
      1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3};
  std::vector<double> time_tmp
      = {0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25,
         0, 0.25, 0.5, 0.75, 1, 1.25, 0, 0.25, 0.5, 0.75, 1, 1.25};
  std::vector<double> S_tmp
      = {0.697422818, 0.779864818, 0.743221333, 0.758435205, 0.808051446,
         0.686108749, 0.320104563, 0.350121144, 0.502742394, 0.558053772,
         0.582478347, 0.762844653, 0.585482357, 0.700497323, 0.721721175,
         0.733862118, 0.836925895, 0.847883572, 0.236061912, 0.155799552,
         0.154413418, 0.138306271, 0.165811855, 0.124205239, 0.646444271,
         0.754752689, 0.680106139, 0.724804572, 0.761259844, 0.918885414,
         0.264301538, 0.44024127,  0.33592968,  0.466237076, 0.39026693,
         0.509501427, 0.144253139, 0.078025161, 0.079248424, 0.115048385,
         0.11482959,  0.104642728, 0.309511876, 0.25611815,  0.2870764,
         0.326425364, 0.348033363, 0.426614332, 0.137565074, 0.12310404,
         0.195950933, 0.288991499, 0.229899611, 0.22922396,  0.440310915,
         0.562917821, 0.568418993, 0.571485251, 0.621414403, 0.757130048,
         0.122328103, 0.157660026, 0.117029664, 0.154274284, 0.148335923,
         0.192465007, 0.302510816, 0.297564226, 0.226598912, 0.264716265,
         0.268766157, 0.214098964, 0.152107217, 0.195166025, 0.209850445,
         0.204396659, 0.070534809, 0.216516031, 0.0768684,   0.082234484,
         0.088461498, 0.161818497, 0.081416511, 0.163790437, 0.620134438,
         0.599999005, 0.629303669, 0.682811572, 0.677937499, 0.685667668,
         0.101899323, 0.048300604, 0.047188433, 0.054014777, 0.073608689,
         0.081108123, 0.195852052, 0.135326061, 0.188242142, 0.21820048,
         0.28448702,  0.328799858, 0.843742033, 0.796284943, 0.897453101,
         0.92183767,  0.919720003, 0.949491104, 0.206258801, 0.139764589,
         0.143756953, 0.178438121, 0.307829078, 0.33152285,  0.104238234,
         0.056300296, 0.146186095, 0.135886669, 0.140292223, 0.154451084,
         0.83179558,  0.808896718, 0.835804352, 0.838544678, 0.767683502,
         0.713641491, 0.305475768, 0.396665983, 0.414178167, 0.407262937,
         0.319619694, 0.538537886, 0.421088963, 0.467302928, 0.356255982,
         0.48063409,  0.510091931, 0.537947287, 0.826853113, 0.895192848,
         0.950521035, 0.973423564, 0.995921274, 0.998932103};
  std::vector<double> X_s_tmp = {
      1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
      0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
      0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
  std::vector<double> X_r_tmp = {
      0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0};
  std::vector<int> pbo_flag = {1, 0, 0};
  int multiplicative_r = 1;
  int multiplicative_s = 0;

  // test parameters
  double tau = 44.5244470857864;
  double beta = 18.3282233382045;
  double beta_pbo = 0.144172278103498;
  double k_el = 11.114687362828;
  double k_eq = 19.4927717007374;
  double base_s = -1.44206950140302;
  double base_r = -2.12754469242996;
  std::vector<double> theta_r_tmp = {0.268260192850259};
  std::vector<double> theta_s_tmp = {0.536021271363263, 0.67333021241239};
  std::vector<double> eta_pr_tmp = std::vector<double>(
      {-0.0443069069728129,  -0.332896641065712,  0.0141453265123804,
       -0.11587006272909,    0.242567644119403,   -0.170543756751259,
       -0.00619873890934344, -0.0257329871427626, 0.152836065238848,
       0.0303273016272015,   0.233797383963618,   0.305889945564208,
       0.0150105411550357,   -0.111758778736258,  -0.290353363522626,
       0.217859244380725,    -0.502410364174122,  -0.0312596352842242,
       0.236460937833997,    0.215014453947308,   -0.00762905809846247,
       -0.013202254784413,   0.0792577495556864,  0.500874428017037});
  std::vector<double> eta_sr_tmp = std::vector<double>(
      {-0.5623141850453, 0.558273791642117, 0.0780051903331041});
  std::vector<double> eta_ps_tmp = std::vector<double>(
      {1.05366559207754,   1.14190372890819,   1.78930291157674,
       -0.557036603321984, 0.863422854894921,  0.307027585366082,
       -1.05891387502254,  -0.628179281485483, -0.809478673150575,
       0.429410896081319,  -0.993135086772184, -0.417691671565969,
       -1.43068302976009,  -1.71885825117325,  1.01258802993507,
       -1.75201520846015,  -0.461993303590443, 1.72462959852617,
       -0.748192732464531, -0.813991923225303, 2.3855557434622,
       0.0554396944918413, 0.454458503736768,  2.05506370908284});
  std::vector<double> eta_ss_tmp = std::vector<double>(
      {0.204172463001089, -0.537214174767437, 0.000803775842332403});

  // expected results
  double target = 227.80069495862688;

  // preapare arguments
  int N = IDp.size();
  stan::math::vector_d time(N);
  stan::math::vector_d S(N);
  Eigen::Matrix<double, -1, -1> X_s(N, theta_s_tmp.size());
  Eigen::Matrix<double, -1, -1> X_r(N, theta_r_tmp.size());

  for (int j = 0; j < theta_s_tmp.size(); j++) {
    for (int i = 0; i < N; i++) {
      X_s(i, j) = X_s_tmp[j * N + i];
    }
  }

  for (int j = 0; j < theta_r_tmp.size(); j++) {
    for (int i = 0; i < N; i++) {
      X_r(i, j) = X_r_tmp[j * N + i];
    }
  }

  for (unsigned int i = 0; i < time_tmp.size(); i++) {
    time(i) = time_tmp[i];
  }
  for (unsigned int i = 0; i < S_tmp.size(); i++) {
    S(i) = S_tmp[i];
  }

  Eigen::Matrix<double, -1, 1> eta_ps(eta_ps_tmp.size());
  Eigen::Matrix<double, -1, 1> eta_pr(eta_pr_tmp.size());
  Eigen::Matrix<double, -1, 1> eta_ss(eta_ss_tmp.size());
  Eigen::Matrix<double, -1, 1> eta_sr(eta_sr_tmp.size());

  Eigen::Matrix<double, -1, 1> theta_r(theta_r_tmp.size());
  Eigen::Matrix<double, -1, 1> theta_s(theta_s_tmp.size());

  for (unsigned int i = 0; i < eta_ps_tmp.size(); i++) {
    eta_ps(i) = eta_ps_tmp[i];
  }
  for (unsigned int i = 0; i < eta_pr_tmp.size(); i++) {
    eta_pr(i) = eta_pr_tmp[i];
  }
  for (unsigned int i = 0; i < eta_ss_tmp.size(); i++) {
    eta_ss(i) = eta_ss_tmp[i];
  }
  for (unsigned int i = 0; i < eta_sr_tmp.size(); i++) {
    eta_sr(i) = eta_sr_tmp[i];
  }

  for (unsigned int i = 0; i < theta_r_tmp.size(); i++) {
    theta_r(i) = theta_r_tmp[i];
  }

  for (unsigned int i = 0; i < theta_s_tmp.size(); i++) {
    theta_s(i) = theta_s_tmp[i];
  }

  // run
  double tgt = stan::math::generalized_logistic_model(
      IDp, IDs, pbo_flag, time, S, multiplicative_s, multiplicative_r, X_s, X_r,
      tau, beta, beta_pbo, k_el, k_eq, theta_r, theta_s, eta_pr, eta_sr, eta_ps,
      eta_ss, base_s, base_r);

  // check values
  EXPECT_NEAR(tgt, target, 1e-8);
}